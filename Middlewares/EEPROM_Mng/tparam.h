/***************************************************************************************************
 *   Project:       P_0172_FW01 - 
 *   Author:        
 ***************************************************************************************************
 *   Distribution:
 *
 ***************************************************************************************************
 *   MCU Family:    
 *   Compiler:      
 ***************************************************************************************************
 *   File:          tparam.h
 *   Description:   Библиотека параметров
 *
 ***************************************************************************************************
 *   History:       14.09.2010 - [] - file created
 *
 **************************************************************************************************/

#ifndef _TPARAM_H
#define _TPARAM_H

/***************************************************************************************************
 *                                         INCLUDED FILES                                          *
 **************************************************************************************************/

#include <csp\types.h>
#include "param_conf.h"

/***************************************************************************************************
 *                                           DEFINITIONS                                           *
 **************************************************************************************************/

#define TPARAM_SAFETY_LEVEL_0       (0)             /* в NVRAM хранится только значение.
                                                       значение всегда подразумевается верным,
                                                       никакой проверки на сбой не проводится
                                                    */
#define TPARAM_SAFETY_LEVEL_1       (1 << 0)        /* в NVRAM хранится значение + CRC.
                                                       при считывании проверяется CRC, 
                                                       если обнаружена ошибка, значение заменяется
                                                       на дефолтное, которое хранится в коде
                                                       программы
                                                    */
#define TPARAM_SAFETY_LEVEL_2       (2 << 0)        /* в NVRAM хранится значение + CRC в двух ячейках 
                                                       при считывании проверяется CRC обоих записей, 
                                                       а так же записи сравниваются между собой.
                                                       Если ошибки не обнаружено, берется значение
                                                       первой ячейки.
                                                       Если обнаружен сбой CRC одной из ячеек,
                                                       а CRC второй ячейки верно, берется значение
                                                       второй, а первая перезаписывается.
                                                       Если сбоев не обнаружено, но значения
                                                       ячеек разные, приоритет имеет первая
                                                       ячейка.
                                                       Если обнаружены сбои в обоих ячейках, их
                                                       значение заменяется на дефолтное.
                                                       При записи сначала записывается вторая
                                                       ячейка.
                                                       
                                                    */
#define TPARAM_SAFETY_LEVEL_3       (3 << 0)        /* В NVRAM хранится значение + CRC в трех ячейках 
                                                       при считывании проверяется CRC всех записей,
                                                       а значения ячеек сравниваются между собой.
                                                    */
#define TPARAM_SAFETY_LEVEL_MASK    (3 << 0)


/**
 * Дескриптор параметра
 */
typedef struct _TPARAM_DESC
{
    TPARAM_ADDR addr;       /* смещение параметра в энергонезависимой памяти относительно базового адреса (байт)    */
    U08         attr;       /* атрибуты параметра                                       */
    U08         size;       /* размер одной копии параметра без учета CRC               */

    void        *val;       /* указатель на копию параметра в ОЗУ                       */
    void  const *def;       /* указатель на констовое значение параметра по умолчанию   */

} TPARAM_DESC;

/**
 * Таблица параметров
 */
typedef struct _TPARAM_TBL
{
    U32                 addr;   /* начальный адрес таблицы параметров в энергонезависимой памяти    */
    TPARAM_ADDR         size;   /* размер таблицы параметров в эрергонезависимой памяти             */
    U16_FAST            pnum;   /* количество параметров в таблице                                  */
    TPARAM_DESC const   *dt;    /* указатель на список дескрипторов                                 */
} TPARAM_TBL;

typedef U08_FAST TPARAM_ERR;

#define TPARAM_ERR_NO           0   /* успешное выполнение                                                      */
#define TPARAM_ERR_WPARAM       1   /* ошибка в параметре вызова функции                                        */
#define TPARAM_ERR_RESTORE      2   /* ошибка совпадения контрольной суммы или копий - параметр восстановлен    */
#define TPARAM_ERR_WRITE        3   /* ошибка записи в энергонезависимую память                                 */

#define TPARAM_CRC_SIZE         sizeof(TPARAM_CRC)


/***************************************************************************************************
 *                                       EXTERNAL FUNCTIONS
 **************************************************************************************************/

void        tparam_nv_read(U32 addr, TPARAM_ADDR size, U08 *pt);
void        tparam_nv_write(U32 addr, TPARAM_ADDR size, U08 *pt);

void        tparam_lock(void);
void        tparam_unlock(void);
TPARAM_CRC  tparam_crc(U08 *pt, TPARAM_ADDR size);

/***************************************************************************************************
 *                                         GLOBAL VARIABLES                                        *
 **************************************************************************************************/

/***************************************************************************************************
 *                                    PUBLIC FUNCTION PROTOTYPES                                   *
 **************************************************************************************************/

TPARAM_ERR  tparam_init(TPARAM_TBL const *tbl);

TPARAM_ERR  tparam_load(TPARAM_TBL const *tbl, U16_FAST i);
TPARAM_ERR  tparam_load_p(TPARAM_TBL const *tbl, void *val);

TPARAM_ERR  tparam_save(TPARAM_TBL const *tbl, U16_FAST i);
TPARAM_ERR  tparam_save_p(TPARAM_TBL const *tbl, void *val);

TPARAM_ERR  tparam_reset(TPARAM_TBL const *tbl, U16_FAST i);
TPARAM_ERR  tparam_reset_p(TPARAM_TBL const *tbl, void *val);


#endif /* _TPARAM_H */
/***************************************************************************************************
    end of file: tparam.h
 *************************************************************************************************/
